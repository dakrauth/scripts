#!/usr/bin/env python
import sys
from pprint import pprint
from pathlib import Path
from dataclasses import dataclass


class File:
    def __init__(self, filename):
        self.path = Path(filename)
        self.name = filename.name[:10]


def clean(dirname, delete=True):
    p = Path(dirname)
    months = {}
    for fn in sorted(p.glob("*.gz")):
        ts, _, suffix = fn.name.partition(".")
        yr, mo, *_ = [int(i) for i in ts.split("-")]

        f = File(fn)
        if f.path.stat().st_size == 0:
            f.path.unlink()
            continue

        months.setdefault((yr, mo), []).append(f)

    removed = 0
    size = 0
    for key, values in months.items():
        if len(values) < 2:
            continue

        keep = values.pop()
        print(f"** {key} keeps {keep.name}, would delete ")

        msg = ",".join(d.name for d in values)
        print(f"  {msg}")
        removed += len(values)

        size += sum([f.path.stat().st_size for f in values])
        for f in values:
            f.path.unlink()

    print(f"Remove {removed} files, {size:,} bytes")


def main():
    if len(sys.argv) < 2:
        print("Provide path(s) for directories to clean")
        return 1

    for arg in sys.argv[1:]:
        clean(arg)

    return 0


if __name__ == '__main__':
    sys.exit(main())
